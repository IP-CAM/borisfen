// Generated by CoffeeScript 1.8.0
(function() {
  var DOption,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DOption = (function() {
    DOption.prototype.dependencies = [];

    DOption.prototype.option_id = 0;

    DOption.prototype.is_parent = false;

    DOption.prototype.current_value = [];

    DOption.prototype.self_type = false;

    DOption.prototype.element = false;

    DOption.prototype.child = [];

    function DOption(option_id, self_type, element, dependencies) {
      var option, _i, _len, _ref;
      this.option_id = option_id;
      this.self_type = self_type;
      this.element = element;
      this.dependencies = dependencies;
      this.changeSelect = __bind(this.changeSelect, this);
      this.changeCheckbox = __bind(this.changeCheckbox, this);
      this.changeRadio = __bind(this.changeRadio, this);
      _ref = this.dependencies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (parseInt(option.parent) === parseInt(this.option_id)) {
          this.is_parent = true;
        }
      }
      if (this.is_parent) {
        this.onChange();
      }
    }

    DOption.prototype.detectChild = function() {
      var dependency, option, options, _i, _len, _ref, _results;
      options = $('.options').find('ul.option');
      _ref = this.dependencies;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dependency = _ref[_i];
        if (parseInt(dependency.parent) === parseInt(this.option_id)) {
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = options.length; _j < _len1; _j++) {
              option = options[_j];
              if (parseInt($(option).attr('product-option-id')) === parseInt(dependency.child)) {
                _results1.push(this.child.push(option));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    DOption.prototype.onChange = function() {
      this.detectChild();
      switch (this.self_type) {
        case 'radio':
          return this.changeRadio();
        case 'checkbox':
          return this.changeCheckbox();
        case 'select':
          return this.changeSelect();
        default:
          return console.log('find unrecognized type of option');
      }
    };

    DOption.prototype.changeChild = function() {
      var children, _i, _len, _ref, _results;
      if (this.child.length > 0) {
        _ref = this.child;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          children = _ref[_i];
          switch ($(children).attr('option-type')) {
            case 'radio':
              _results.push(this.changeRadioValues(children));
              break;
            case 'checkbox':
              _results.push(this.changeCheckboxValues(children));
              break;
            case 'select':
              _results.push(this.changeSelectValues(children));
              break;
            default:
              _results.push(console.log('find unrecognized type of option'));
          }
        }
        return _results;
      }
    };

    DOption.prototype.changeRadio = function() {
      $(this.element).find('input[type=radio]').change((function(_this) {
        return function(event) {
          _this.current_value = [];
          _this.current_value.push(parseInt($(_this.element).find('input[type=radio]:checked').first().val()));
          return _this.changeChild();
        };
      })(this));
      this.current_value = [];
      this.current_value.push(parseInt($(this.element).find('input[type=radio]:checked').first().val()));
      return this.changeChild();
    };

    DOption.prototype.changeCheckbox = function() {
      var element, elements, _i, _len;
      $(this.element).find('input[type=checkbox]').change((function(_this) {
        return function(event) {
          var element, elements, _i, _len;
          _this.current_value = [];
          elements = $(_this.element).find('input[type=checkbox]:checked');
          for (_i = 0, _len = elements.length; _i < _len; _i++) {
            element = elements[_i];
            _this.current_value.push(parseInt($(element).val()));
          }
          return _this.changeChild();
        };
      })(this));
      this.current_value = [];
      elements = $(this.element).find('input[type=checkbox]:checked');
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        this.current_value.push(parseInt($(element).val()));
      }
      return this.changeChild();
    };

    DOption.prototype.changeSelect = function() {
      $(this.element).change((function(_this) {
        return function(event) {
          _this.current_value = [];
          _this.current_value.push(parseInt($(_this.element).find('option:selected').first().val()));
          return _this.changeChild();
        };
      })(this));
      this.current_value = [];
      this.current_value.push(parseInt($(this.element).find('option:selected').first().val()));
      return this.changeChild();
    };

    DOption.prototype.changeRadioValues = function(element) {
      var active_nodes, child_value, children_value, node, parent, parent_values, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _results;
      child_value = $(element).find('input[type=radio]');
      for (_i = 0, _len = child_value.length; _i < _len; _i++) {
        children_value = child_value[_i];
        children_value.active = false;
      }
      for (_j = 0, _len1 = child_value.length; _j < _len1; _j++) {
        children_value = child_value[_j];
        parent_values = $(children_value).attr('parent-value-id');
        if ((parent_values != null) && parent_values !== '') {
          parent_values = parent_values.split(' ');
          for (_k = 0, _len2 = parent_values.length; _k < _len2; _k++) {
            parent = parent_values[_k];
            if (_ref = parseInt(parent), __indexOf.call(this.current_value, _ref) >= 0) {
              children_value.active = true;
            }
          }
        } else {
          children_value.active = true;
        }
      }
      _results = [];
      for (_l = 0, _len3 = child_value.length; _l < _len3; _l++) {
        children_value = child_value[_l];
        if (children_value.active) {
          $(children_value).removeAttr('disabled');
          $(children_value).removeClass('disabled');
          $(children_value).parents('label').first().removeClass('disabled');
        } else {
          $(children_value).attr('disabled', 'disabled');
          $(children_value).addClass('disabled');
          $(children_value).parents('label').first().addClass('disabled');
        }
        $(children_value).removeAttr('checked');
        active_nodes = $(element).find('.active');
        _results.push((function() {
          var _len4, _m, _results1;
          _results1 = [];
          for (_m = 0, _len4 = active_nodes.length; _m < _len4; _m++) {
            node = active_nodes[_m];
            _results1.push($(node).removeClass('active'));
          }
          return _results1;
        })());
      }
      return _results;
    };

    DOption.prototype.changeCheckboxValues = function(element) {
      var child_value, children_value, parent, parent_values, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _results;
      child_value = $(element).find('input[type=checkbox]');
      for (_i = 0, _len = child_value.length; _i < _len; _i++) {
        children_value = child_value[_i];
        children_value.active = false;
      }
      for (_j = 0, _len1 = child_value.length; _j < _len1; _j++) {
        children_value = child_value[_j];
        parent_values = $(children_value).attr('parent-value-id');
        if ((parent_values != null) && parent_values !== '') {
          parent_values = parent_values.split(' ');
          for (_k = 0, _len2 = parent_values.length; _k < _len2; _k++) {
            parent = parent_values[_k];
            if (_ref = parseInt(parent), __indexOf.call(this.current_value, _ref) >= 0) {
              children_value.active = true;
            }
          }
        } else {
          children_value.active = true;
        }
      }
      _results = [];
      for (_l = 0, _len3 = child_value.length; _l < _len3; _l++) {
        children_value = child_value[_l];
        if (children_value.active) {
          $(children_value).removeAttr('disabled');
          $(children_value).removeClass('disabled');
        } else {
          $(children_value).attr('disabled', 'disabled');
          $(children_value).addClass('disabled');
        }
        $(children_value).removeAttr('checked');
        _results.push($(children_value).checkbox({}));
      }
      return _results;
    };

    DOption.prototype.changeSelectValues = function(element) {
      var child_value, children_value, parent, parent_values, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref;
      child_value = $(element).find('option');
      for (_i = 0, _len = child_value.length; _i < _len; _i++) {
        children_value = child_value[_i];
        children_value.active = false;
      }
      for (_j = 0, _len1 = child_value.length; _j < _len1; _j++) {
        children_value = child_value[_j];
        parent_values = $(children_value).attr('parent-value-id');
        if ((parent_values != null) && parent_values !== '') {
          parent_values = parent_values.split(' ');
          for (_k = 0, _len2 = parent_values.length; _k < _len2; _k++) {
            parent = parent_values[_k];
            if (_ref = parseInt(parent), __indexOf.call(this.current_value, _ref) >= 0) {
              children_value.active = true;
            }
          }
        } else {
          children_value.active = true;
        }
      }
      for (_l = 0, _len3 = child_value.length; _l < _len3; _l++) {
        children_value = child_value[_l];
        if (children_value.active) {
          $(children_value).removeAttr('disabled');
          $(children_value).removeClass('disabled');
        } else {
          $(children_value).attr('disabled', 'disabled');
          $(children_value).addClass('disabled');
        }
      }
      $(element).find('select').first().selectpicker('deselectAll');
      $(element).find('select').first().selectpicker('update');
      $(element).find('select').first().selectpicker('render');
      return $(element).find('select').first().selectpicker('refresh');
    };

    return DOption;

  })();

  $(document).ready(function() {
    var dOptions;
    dOptions = [];
    if (typeof chained_options !== "undefined" && chained_options !== null) {
      return $('ul.option').each(function() {
        return dOptions.push(new DOption($(this).attr('product-option-id'), $(this).attr('option-type'), this, chained_options));
      });
    }
  });

}).call(this);

//# sourceMappingURL=dependent-options.js.map
